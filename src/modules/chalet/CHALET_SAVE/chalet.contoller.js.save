import path from 'path';
import { chaletModel } from './chalet.model.js';
import { cityModel } from '../city/city.model.js';
import { villageModel } from '../village/village.model.js';
import { reservationModel } from '../reservation/reservation.model.js';
import AppError from '../../utils/services/AppError.js';
import { removeImage } from '../../utils/services/removefile.js';



export const addChalet = async (req, res, next) => {
  const {
    name, city, village, location, bedrooms, bathrooms,
    type, guests, price, code, badroomsDetails,
    features, terms
  } = req.body;

  if (!name || !city || !village || !req.files?.mainImg || !req.files?.imgs) {
    return next(new AppError('Missing required fields.', 400));
  }

  if (!await cityModel.exists({ _id: city }))
    return next(new AppError('City not found.', 404));
  if (!await villageModel.exists({ _id: village }))
    return next(new AppError('Village not found.', 404));

  const mainImgName = req.files.mainImg[0].filename;
  const imgsNames = req.files.imgs.map(f => f.filename);
  const videoName = req.files.video?.[0]?.filename || undefined;  // ← new
  const chalet = await chaletModel.create({
    name,
    city,
    village,
    mainImg: mainImgName,
    imgs: imgsNames,
    location,
    bedrooms: Number(bedrooms),
    bathrooms: Number(bathrooms),
    type,
    guests: Number(guests),
    price: Number(price),
    code,
    badroomsDetails: JSON.parse(badroomsDetails),
    features: JSON.parse(features),
    terms: JSON.parse(terms),
    admin: req.admin._id,
    description: req.body.description,
    video: videoName,
    minNights: req.body.minNights ? Number(req.body.minNights) : 1,
    isVisiable: req.body.isVisiable !== undefined ? req.body.isVisiable : true,
    isActive: req.body.isActive !== undefined ? req.body.isActive : true
  });

  res.status(201).json({ success: true, data: chalet });
};

export const deleteChalet = async (req, res, next) => {
  const { id } = req.params;
  const chalet = await chaletModel.findById(id);
  if (!chalet) {
    return next(new AppError('Chalet not found.', 404));
  }

  await removeImage('chalet', path.basename(chalet.mainImg));
  chalet.imgs.forEach(img => removeImage('chalet', path.basename(img)));
  if (chalet.video) await removeImage("chalet", path.basename(chalet.video))
  await chaletModel.findByIdAndDelete(id);
  res.status(200).json({ success: true, message: 'Chalet deleted.' });
};


export const updateChalet = async (req, res, next) => {
  try {
    const { id } = req.params;
    const existing = await chaletModel.findById(id);
    if (!existing) {
      return next(new AppError('Chalet not found.', 404));
    }

    // Collect scalar fields
    const updateData = {};
    [
      'name',
      'city',
      'village',
      'location',
      'bedrooms',
      'bathrooms',
      'type',
      'guests',
      'price',
      'code',
      'description',
      "minNights",
      'isVisiable',
      'isActive'
    ].forEach(field => {
      if (req.body[field] !== undefined) {
        updateData[field] = req.body[field];
      }
    });

    // Parse JSON‐encoded arrays
    if (req.body.badroomsDetails) {
      updateData.badroomsDetails = JSON.parse(req.body.badroomsDetails);
    }
    if (req.body.features) {
      updateData.features = JSON.parse(req.body.features);
    }
    if (req.body.terms) {
      updateData.terms = JSON.parse(req.body.terms);
    }

    // Replace main image
    if (req.files?.mainImg) {
      // remove old main image file
      if (existing.mainImg) {
        await removeImage('chalet', path.basename(existing.mainImg));
      }
      updateData.mainImg = req.files.mainImg[0].filename;
    }

    // Replace gallery images
    if (req.files?.imgs) {
      // remove all old imgs
      existing.imgs.forEach(imgPath =>
        removeImage('chalet', path.basename(imgPath))
      );
      updateData.imgs = req.files.imgs.map(f => f.filename);
    }

    // Replace video
    if (req.files?.video) {
      // remove old video file if exists
      if (existing.video) {
        await removeImage('chalet', path.basename(existing.video));
      }
      updateData.video = req.files.video[0].filename;
    }

    // Perform update + populate refs
    const chalet = await chaletModel.findByIdAndUpdate(id, updateData, {
      new: true,
      runValidators: true
    })
      .populate('city')
      .populate('village')
      .populate('features')
      .populate('terms');

    return res.status(200).json({
      success: true,
      data: chalet
    });
  } catch (err) {
    return next(err);
  }
};